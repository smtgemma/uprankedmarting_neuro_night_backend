datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  organization_admin
  agent
  super_admin
}

enum PlanLevel {
  only_real_agent
  only_ai
  ai_then_real_agent
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum PlanInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum FeedbackType {
  SERVICE
  AGENT
}

enum DocFor {
  AI
  AGENT
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum AgentStatus {
  free
  busy
  offline
}

enum CallStatus {
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
  CANCELED
}

enum employmentType {
  part_time
  full_time
  contract
}

enum AssignmentStatus {
  ASSIGNED
  REMOVED
}

enum PhoneNumberRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ASSIGNED
}

// ============================================
// MODELS
// ============================================

/// User account with authentication and profile information
model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String
  image    String? @default("")
  bio      String? @default("")
  phone    String  @unique

  // Authentication fields
  passwordChangedAt DateTime?
  isVerified        Boolean   @default(false)
  isResetPassword   Boolean   @default(false)
  canResetPassword  Boolean   @default(false)
  isResentOtp       Boolean   @default(false)
  otp               Int?
  otpExpiresAt      DateTime?

  status UserStatus @default(ACTIVE)
  role   UserRole   @default(organization_admin)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Agent             Agent?
  ownedOrganization Organization?     @relation(name: "UserOwnedOrganization")
  ServiceFeedbacks  ServiceFeedback[]
  AgentFeedbacks    AgentFeedback[]
  assignedAgents    AgentAssignment[] @relation("AssignmentMadeBy")

  @@map("users")
}

/// Agent profile with SIP configuration and availability
model Agent {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  status       AgentStatus @default(offline)
  sip_address  String?
  sip_username String?
  sip_password String?
  skills       String[]    @default([])
  employeeId   String      @unique

  // Working hours
  workEndTime   String?
  workStartTime String?

  // Performance metrics
  successCalls Int @default(0)
  droppedCalls Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User              @relation(fields: [userId], references: [id])
  AgentFeedbacks AgentFeedback[]
  calls          Call[]
  assignments    AgentAssignment[]

  @@map("agents")
}

/// Assignment relationship between agents and organizations
model AgentAssignment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  agentUserId    String           @db.ObjectId
  organizationId String           @db.ObjectId
  status         AssignmentStatus @default(ASSIGNED)
  assignedBy     String?          @db.ObjectId
  assignedAt     DateTime         @default(now())
  removedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agent          Agent        @relation(fields: [agentUserId], references: [userId], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedByUser User?        @relation(fields: [assignedBy], references: [id], name: "AssignmentMadeBy")

  @@unique([agentUserId, organizationId])
  @@map("agent_assignments")
}

/// Organization with integrations and configuration
model Organization {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  industry           String?
  address            String?
  websiteLink        String?
  organizationNumber String? @unique
  ownerId            String? @unique @db.ObjectId

  // Agent configuration
  agentVoiceUrl String?
  leadQuestions String[] @default([])

  // Google Sheets integration
  googleSheetsSpreadsheetId String?
  googleSheetsCredentials   Json?
  lastSyncedAt              DateTime?

  // HubSpot integration
  hubspotAccessToken  String?
  hubspotRefreshToken String?
  hubspotExpiresAt    DateTime?
  lastHubSpotSyncedAt DateTime?

  stripeCustomerId String? @unique

  // Trial management
  hasUsedTrial Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  requestedPhoneNumber   PhoneNumberRequest?
  ownedOrganization      User?                   @relation(fields: [ownerId], references: [id], name: "UserOwnedOrganization")
  subscriptions          Subscription[]
  documents              OrganizationDoc[]
  calls                  Call[]
  tools                  ToolIntegration[]
  requestedTwilioNumbers AvailableTwilioNumber[] @relation("RequestedNumbers")
  purchasedTwilioNumbers AvailableTwilioNumber[] @relation("PurchasedNumbers")
  voice                  UploadVoice?
  AiknowledgeBase        AiknowledgeBase[]
  AgentAssignment        AgentAssignment[]
  questions              Question[]
  qaPairs                QaPair[]
  aiagent                aiagents?

  @@map("organizations")
}

/// Available Twilio phone numbers for purchase or assignment
model AvailableTwilioNumber {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sid          String?
  phoneNumber  String  @unique
  friendlyName String

  capabilities Json
  beta         Boolean   @default(false)
  countryCode  String    @default("US")
  isPurchased  Boolean   @default(false)
  isPinned     Boolean   @default(false)
  purchasedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Organization relationships
  requestedByOrgId String?       @db.ObjectId
  purchasedByOrgId String?       @db.ObjectId
  requestedByOrg   Organization? @relation(name: "RequestedNumbers", fields: [requestedByOrgId], references: [id])
  purchasedByOrg   Organization? @relation(name: "PurchasedNumbers", fields: [purchasedByOrgId], references: [id])

  @@map("available_twilio_numbers")
}

/// AI agent configuration for ElevenLabs integration
model aiagents {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  agentId        String @unique
  organizationId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  callLogs     AICallLog[]

  @@map("aiagents")
}

/// Call logs for AI agents
model AICallLog {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  call_sid           String?
  organizationId     String    @db.ObjectId
  agent_id           String
  conversation_id    String?
  from_number        String?
  to_number          String?
  callType           String?
  call_status        String?
  call_time          DateTime?
  call_started_at    DateTime?
  call_completed_at  DateTime?
  call_duration      Int?
  recording_duration Int?
  call_transcript    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  aiagents aiagents @relation(fields: [agent_id], references: [agentId])

  @@map("AICallLog")
}

/// Call records for human agents
model Call {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String @db.ObjectId
  agentId        String @db.ObjectId

  // Call details
  from_number       String?
  to_number         String?
  call_time         DateTime? @default(now())
  callType          String?
  call_status       String?
  call_duration     Int?
  call_started_at   DateTime?
  call_completed_at DateTime?
  call_sid          String?

  // Recording details
  call_transcript    String?
  recording_duration Int?
  recording_sid      String?
  recording_status   String?
  recording_url      String?

  // Processing flags
  processed               Boolean? @default(false)
  transcription_requested Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  receivedBy   Agent        @relation(fields: [agentId], references: [userId])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([call_sid])
  @@map("Call")
}

/// Custom voice uploads for organizations
model UploadVoice {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  voiceId               String  @unique @db.ObjectId
  voiceName             String
  requires_verification Boolean
  organizationId        String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Organization Organization @relation(fields: [organizationId], references: [id])
}

/// AI knowledge base configuration
model AiknowledgeBase {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  organizationId    String @db.ObjectId
  knowledgeBaseId   String @unique
  knowledgeBaseName String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Organization Organization @relation(fields: [organizationId], references: [id])
}

/// Documents uploaded by organizations
model OrganizationDoc {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String  @db.ObjectId
  docFor         DocFor  @default(AGENT)
  fileName       String?
  cloudUrl       String?
  fileFormat     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("company_docs")
}

/// Subscription plans with pricing and features
model Plan {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Float
  currency String       @default("usd")
  interval PlanInterval

  trialDays       Int    @default(1)
  stripePriceId   String @unique
  stripeProductId String @unique

  isActive    Boolean @default(true)
  description String?
  features    Json?   @default("{}")

  // NEW FIELDS
  planLevel         PlanLevel
  defaultAgents     Int       @default(0)
  extraAgentPricing Json?     @default("[]")
  totalMinuteLimit  Int       @default(0)

  // Soft delete
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("plans")
}

/// Active subscriptions for organizations
model Subscription {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  organizationId       String             @db.ObjectId
  planId               String             @db.ObjectId
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  trialStart           DateTime?
  trialEnd             DateTime?
  canceledAt           DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)

  planLevel       PlanLevel
  purchasedNumber String?
  sid             String?
  numberOfAgents  Int?      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id])
  plan         Plan?         @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model WebhookEvent {
  id        String   @id @map("_id")
  type      String
  processed Boolean  @default(false) // optional: for retry safety
  createdAt DateTime @default(now())

  @@map("webhook_events")
}

/// Service feedback from clients
model ServiceFeedback {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  clientId     String  @unique @db.ObjectId
  rating       Int
  feedbackText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

/// Agent-specific feedback from clients
model AgentFeedback {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  agentUserId  String  @db.ObjectId
  clientId     String  @db.ObjectId
  rating       Int
  feedbackText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agent  Agent @relation(fields: [agentUserId], references: [userId], onDelete: Cascade)
  client User  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([agentUserId, clientId])
  @@map("agent_feedbacks")
}

/// Third-party tool integrations
model ToolIntegration {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  companyId String @unique @db.ObjectId
  toolType  String
  config    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Organization @relation(fields: [companyId], references: [id])

  @@map("tool_integrations")
}

/// Frequently asked questions with keywords
model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  org_id            String   @db.ObjectId
  question_text     String
  question_keywords String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [org_id], references: [id])

  @@map("questions")
}

/// Question and answer pairs for knowledge base
model QaPair {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  org_id   String @db.ObjectId
  conv_id  String
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [org_id], references: [id])

  @@map("qa_pairs")
}

/// Phone number requests from organizations
model PhoneNumberRequest {
  id                    String                   @id @default(auto()) @map("_id") @db.ObjectId
  organizationId        String?                  @unique @db.ObjectId
  requesterName         String
  message               String?
  requestedPhonePattern String?
  status                PhoneNumberRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("phone_number_requests")
}
