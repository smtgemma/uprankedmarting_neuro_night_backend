datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============ ENUMS ============
enum UserRole {
  organization_admin
  agent
  super_admin
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PlanLevel {
  only_real_agent
  only_ai
  ai_then_real_agent
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum Interval {
  day
  week
  month
  year
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum FeedbackType {
  SERVICE
  AGENT
}

enum DocFor {
  AI
  AGENT
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}

// ============ MODELS ============
model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String  @unique
  password  String
  image     String? @default("")
  bio       String? @default("")
  phone     String  @unique
  isDeleted Boolean @default(false)

  passwordChangedAt DateTime?
  isVerified        Boolean   @default(false)
  isResetPassword   Boolean   @default(false)
  canResetPassword  Boolean   @default(false)
  isResentOtp       Boolean   @default(false)
  otp               Int?
  otpExpiresAt      DateTime?

  status UserStatus @default(ACTIVE)
  role   UserRole   @default(organization_admin)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Agent        Agent?  @relation("AgentUser")
  AgentCreator Agent[] @relation("AgentCreator")

  ownedOrganization Organization?     @relation(name: "UserOwnedOrganization")
  ServiceFeedbacks  ServiceFeedback[]
  AgentFeedbacks    AgentFeedback[]
  assignedAgents    AgentAssignment[] @relation("AssignmentMadeBy")

  @@map("users")
}

enum AgentStatus {
  free
  busy
  offline
}

enum CallStatus {
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
  CANCELED
}

enum employmentType {
  part_time
  full_time
  contract
}

enum agentPrivacy {
  public
  private
}

enum AssignmentStatus {
  PENDING
  APPROVED
  REJECTED
  REMOVAL_REQUESTED
}

// model Agent {
//   id        String @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String @unique @db.ObjectId
//   creatorId String @db.ObjectId
//   creator   User   @relation("AgentCreator", fields: [creatorId], references: [id])

//   status       AgentStatus @default(offline)
//   sip_address  String?
//   sip_username String?
//   sip_password String?

//   dateOfBirth    DateTime
//   gender         String
//   address        String
//   emergencyPhone String?  @unique
//   ssn            String?  @unique

//   skills String[] @default([])

//   employeeId  String  @unique
//   isAvailable Boolean @default(true)
//   assignTo    String? @db.ObjectId

//   jobTitle       String
//   employmentType employmentType
//   department     String?

//   // workEndTime       String?
//   // workStartTime     String?
//   // startWorkDateTime DateTime?
//   // endWorkDateTime   DateTime?

//   privacy   agentPrivacy @default(private)
//   otherInfo String?

//   successCalls Int @default(0)
//   droppedCalls Int @default(0)

//   // Timestamps
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt //later should be required

//   // Relations
//   user           User            @relation("AgentUser", fields: [userId], references: [id])
//   organization   Organization?   @relation(fields: [assignTo], references: [id])
//   AgentFeedbacks AgentFeedback[]
//   calls          Call[]

//   assignments AgentAssignment[]

//   @@map("agents")
// }

// 1. Modified Agent Model
model Agent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique @db.ObjectId
  creatorId String @db.ObjectId
  creator   User   @relation("AgentCreator", fields: [creatorId], references: [id])

  status       AgentStatus @default(offline)
  sip_address  String?
  sip_username String?
  sip_password String?

  dateOfBirth    DateTime
  gender         String
  address        String
  emergencyPhone String?  @unique
  ssn            String?  @unique

  skills String[] @default([])

  employeeId  String  @unique
  isAvailable Boolean @default(true)

  //  CHANGED: assignTo is now an array for multiple organizations
  assignTo String[] @default([]) @db.ObjectId

  jobTitle       String
  employmentType employmentType
  department     String?

  //  NEW: Privacy setting determines assignment behavior
  privacy   agentPrivacy @default(private)
  otherInfo String?

  successCalls Int @default(0)
  droppedCalls Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User              @relation("AgentUser", fields: [userId], references: [id])
  organization   Organization?     @relation(fields: [assignTo], references: [id])
  //  REMOVED: Direct organization relation (now handled via assignTo array)
  AgentFeedbacks AgentFeedback[]
  calls          Call[]
  assignments    AgentAssignment[]

  @@map("agents")
}


model AgentAssignment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  agentUserId    String           @db.ObjectId
  organizationId String           @db.ObjectId
  status         AssignmentStatus @default(PENDING)
  assignedBy     String?          @db.ObjectId
  assignedAt     DateTime         @default(now())
  approvedAt     DateTime?
  rejectedAt     DateTime?
  reason         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent          Agent        @relation(fields: [agentUserId], references: [userId], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedByUser User?        @relation(fields: [assignedBy], references: [id], name: "AssignmentMadeBy")
}


// // 2. Updated AgentAssignment Model
// model AgentAssignment {
//   id             String           @id @default(auto()) @map("_id") @db.ObjectId
//   agentUserId    String           @db.ObjectId
//   organizationId String           @db.ObjectId
//   status         AssignmentStatus @default(PENDING)
//   assignedBy     String?          @db.ObjectId
//   assignedAt     DateTime         @default(now())
//   approvedAt     DateTime?
//   rejectedAt     DateTime?
//   reason         String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   agent          Agent        @relation(fields: [agentUserId], references: [userId], onDelete: Cascade)
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   assignedByUser User?        @relation(fields: [assignedBy], references: [id], name: "AssignmentMadeBy")

//   // ✅ NEW: Composite unique constraint to prevent duplicate assignments
//   @@unique([agentUserId, organizationId])
// }

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name               String
  industry           String?
  address            String?
  websiteLink        String?
  organizationNumber String?
  ownerId            String? @unique @db.ObjectId

  agentVoiceUrl String?
  leadQuestions String[] @default([])

  googleSheetsSpreadsheetId String?
  googleSheetsCredentials   Json?
  lastSyncedAt              DateTime?

  // HubSpot integration fields
  hubspotAccessToken  String?
  hubspotRefreshToken String?
  hubspotExpiresAt    DateTime?
  lastHubSpotSyncedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agents                Agent[]
  ownedOrganization     User?                   @relation(fields: [ownerId], references: [id], name: "UserOwnedOrganization")
  subscriptions         Subscription[]
  documents             OrganizationDoc[]
  calls                 Call[]
  tools                 ToolIntegration[]
  availableTwilioNumber AvailableTwilioNumber[]
  voice                 UploadVoice?
  AiknowledgeBase       AiknowledgeBase[]
  AgentAssignment       AgentAssignment[]
  questions             Question[]
  qaPairs               QaPair[]

  aiagent             aiagents?
  phoneNumberRequests PhoneNumberRequest?

  @@map("organizations")
}

model aiagents {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  agentId        String @unique // ElevenLabs agent ID
  organizationId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  callLogs     AICallLog[] // 1-to-many relation

  @@map("aiagents")
}

model AICallLog {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  call_sid           String?
  organizationId     String    @db.ObjectId
  agent_id           String // links to aiagents.agentId
  conversation_id    String?
  from_number        String?
  to_number          String?
  callType           String?
  call_status        String?
  call_time          DateTime?
  call_started_at    DateTime?
  call_completed_at  DateTime?
  call_duration      Int?
  recording_duration Int?
  call_transcript    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aiagents aiagents @relation(fields: [agent_id], references: [agentId])

  @@map("AICallLog")
}

model Call {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  organizationId String @db.ObjectId
  agentId        String @db.ObjectId

  from_number       String?
  to_number         String?
  call_time         DateTime? @default(now())
  callType          String? // direction
  call_status       String?
  call_duration     Int?
  call_started_at   DateTime?
  call_completed_at DateTime?

  call_sid String?

  call_transcript    String?
  recording_duration Int?
  recording_sid      String?
  recording_status   String?
  recording_url      String?

  processed               Boolean? @default(false)
  transcription_requested Boolean? @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  receivedBy   Agent        @relation(fields: [agentId], references: [userId])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([call_sid])
  @@map("Call")
}

model UploadVoice {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  voiceId               String  @unique @db.ObjectId
  voiceName             String
  requires_verification Boolean
  organizationId        String  @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Organization Organization @relation(fields: [organizationId], references: [id])
}

model AiknowledgeBase {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  organizationId    String       @db.ObjectId
  knowledgeBaseId   String       @unique
  knowledgeBaseName String
  Organization      Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationDoc {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String  @db.ObjectId
  docFor         DocFor  @default(AGENT)
  fileName       String? // cleaned name (without extension)
  cloudUrl       String? // Cloudinary secure URL
  fileFormat     String? // pdf, docx, xlsx ইত্যাদি

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("company_docs")
}

model Plan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  planName      String
  amount        Float
  currency      String
  interval      Interval       @default(month)
  intervalCount Int
  freeTrialDays Int?
  productId     String
  priceId       String
  active        Boolean
  description   String?
  features      Json?
  planLevel     PlanLevel
  Subscription  Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("plans")
}

model Subscription {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  organizationId  String             @db.ObjectId
  planId          String             @db.ObjectId
  startDate       DateTime
  endDate         DateTime?
  amount          Float
  stripePaymentId String             @unique
  paymentStatus   PaymentStatus      @default(PENDING)
  status          SubscriptionStatus @default(INCOMPLETE)
  organization    Organization?      @relation(fields: [organizationId], references: [id])
  plan            Plan?              @relation(fields: [planId], references: [id])
  planLevel       PlanLevel
  purchasedNumber String
  sid             String
  numberOfAgents  Int?               @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("subscriptions")
}

model ServiceFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId     String  @unique @db.ObjectId
  rating       Int
  feedbackText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model AgentFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  agentId      String  @db.ObjectId
  clientId     String  @db.ObjectId
  rating       Int
  feedbackText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent  Agent @relation(fields: [agentId], references: [userId], onDelete: Cascade)
  client User  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Add composite unique constraint instead
  @@unique([agentId, clientId])
  @@map("agent_feedbacks")
}

model ToolIntegration {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  companyId String @unique @db.ObjectId
  toolType  String
  config    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Organization @relation(fields: [companyId], references: [id])

  @@map("tool_integrations")
}

model AvailableTwilioNumber {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sid          String?
  phoneNumber  String  @unique
  friendlyName String

  capabilities Json
  beta         Boolean   @default(false)
  countryCode  String    @default("US")
  isPurchased  Boolean   @default(false)
  purchasedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  purchasedByOrganizationId String?       @db.ObjectId
  organization              Organization? @relation(fields: [purchasedByOrganizationId], references: [id])

  requestAssignNumber PhoneNumberRequest?

  @@map("available_twilio_numbers")
}

model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  org_id            String   @db.ObjectId
  question_text     String
  question_keywords String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [org_id], references: [id])

  @@map("questions")
}

model QaPair {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  org_id   String @db.ObjectId
  conv_id  String
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [org_id], references: [id])

  @@map("qa_pairs")
}

enum PhoneNumberRequestStatus {
  PENDING
  APPROVED
  REJECTED
  ASSIGNED
}

model PhoneNumberRequest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String?       @unique @db.ObjectId
  organization   Organization? @relation(fields: [organizationId], references: [id])

  requesterName  String
  requesterEmail String
  requesterPhone String
  message        String?

  requestedPhonePattern String? // e.g., "US", "212", etc.
  status                PhoneNumberRequestStatus @default(PENDING)

  assignedNumberId String?                @unique @db.ObjectId
  assignedNumber   AvailableTwilioNumber? @relation(fields: [assignedNumberId], references: [id])

  rejectionReason String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  assignedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("phone_number_requests")
}
